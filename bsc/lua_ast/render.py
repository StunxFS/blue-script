# Copyright (C) 2024 Jose Mendoza. All rights reserved. Use of this
# source code is governed by an MIT license that can be found in the
# LICENSE file.

from bsc import utils
from bsc.lua_ast import *

class LuaRender:
    def __init__(self, ctx, modules):
        self.ctx = ctx
        self.modules = modules
        self.cur_module = None
        self.lua_file = utils.Builder()

    def render_modules(self):
        for module in self.modules:
            self.cur_module = module
            self.render_module(module)

    def render_module(self, module):
        self.lua_file.writeln("-- Autogenerated with the BlueScript compiler")
        self.lua_file.writeln(f"-- {utils.full_version()}")
        self.lua_file.writeln("-- DO NOT MODIFY MANUALLY!\n")

        self.lua_file.writeln(f"local {module.name} = {{}}\n")
        self.render_decls(module.decls)
        self.lua_file.writeln(f"return {module.name}")

        with open(f"{module.name}.lua", "w") as f:
            f.write(str(self.lua_file))
        self.lua_file.clear()

    def render_decls(self, decls):
        for decl in decls:
            self.render_decl(decl)

    def render_decl(self, decl):
        if isinstance(decl, LuaFunction):
            self.render_fn_decl(decl)

    def render_fn_decl(self, decl):
        self.lua_file.writeln(f"function {self.cur_module.name}.{decl.name}()")
        self.lua_file.writeln("end\n")
