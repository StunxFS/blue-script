// Copyright (C) 2024 Jose Mendoza. All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the
// LICENSE file.

%import common.CPP_COMMENT
%import common.C_COMMENT
%import common.NUMBER
%import common.CNAME -> NAME
%import common.ESCAPED_STRING -> STRING
%import common.WS

%ignore CPP_COMMENT
%ignore C_COMMENT
%ignore WS

?module: decl*

// Declarations

?decl: access_modifier? (import_decl
       | var_decl
       | const_decl
       | extern_decl
       | class_decl
       | fn_decl)

import_decl: KW_IMPORT (custom_symbol_import KW_FROM)? STRING
custom_symbol_import: LBRACE NAME (COMMA NAME)* RBRACE
       | NAME
       | MUL

var_decl: KW_VAR NAME [COLON type] ASSIGN_DECL expr
const_decl: KW_CONST NAME [COLON type] ASSIGN_DECL expr

extern_decl: KW_EXTERN decl

class_decl: KW_CLASS NAME LBRACE (class_field | decl)* RBRACE
class_field: access_modifier? NAME COLON type [ASSIGN_DECL expr]

fn_decl: KW_FN NAME LPAREN fn_args? RPAREN [BANG | type] fn_body?
fn_args: (KW_SELF | fn_arg) (COMMA fn_arg)*
fn_arg: NAME COLON type [ASSIGN_DECL expr]
fn_body: LBRACE stmt* RBRACE

access_modifier: KW_PUB | KW_PROT

?type: primitive_type
       | NAME (DOT NAME)* -> user_type
       | QUESTION type -> option_type
       | LBRACKET expr? RBRACKET type -> array_type
       | LBRACE type COLON type RBRACE -> map_type
       | type PIPE type (PIPE type)* -> sum_type
       | LPAREN type COMMA type (COMMA type)* RPAREN -> tuple_type

primitive_type: "any"
       | "bool"
       | "number"
       | "string"
       // | "thread"

// Statements

?stmt: expr
       | assignment
       | block
       | KW_WHILE LPAREN expr RPAREN stmt -> while_stmt

block: LBRACE stmt* RBRACE
assignment: expr (COMMA expr)* op_assign expr
op_assign: "=" | ASSIGN_DECL | "+=" | "-=" | "/=" | "*=" | "%=" | "|=" | "^=" | "&="

// Expressions

?expr: literal
       | par_expr
       | AT NAME -> builtin_var
       | expr DOT NAME -> selector_expr
       | LBRACKET [expr (COMMA expr)*] RBRACKET BANG? -> array_literal
       | LBRACE expr COLON expr (COMMA expr COLON expr)* RBRACE -> map_literal
       | LPAREN expr (COMMA expr)* RPAREN -> tuple_literal
       | expr LPAREN [expr (COMMA expr)*] RPAREN -> call_expr
       | KW_IF LPAREN expr RPAREN stmt [KW_ELSE stmt] -> if_expr
       | KW_SWITCH [LPAREN expr RPAREN] LBRACE switch_branches RBRACE -> switch_expr

par_expr: LPAREN expr RPAREN

switch_branches: switch_branch (COMMA switch_branch)*
switch_branch: expr (COMMA expr)* ARROW stmt
       | KW_ELSE ARROW stmt

?literal: KW_NIL
       | bool_lit
       | number_lit
       | STRING
       | KW_SELF
       | NAME
bool_lit: KW_TRUE | KW_FALSE
number_lit: NUMBER | HEX_NUMBER | OCT_NUMBER

// Tokens

HEX_NUMBER: /0x[\da-f]*l?/i
OCT_NUMBER: /0o?[0-7]*l?/i

MUL: "*"
AT: "@"
SLASH: "/"
ARROW: "->"
COMMA: ","
DOT: "."
COLON: ":"
BANG: "!"
QUESTION: "?"
PIPE: "|"
LPAREN: "("
RPAREN: ")"
LBRACE: "{"
RBRACE: "}"
LBRACKET: "["
RBRACKET: "]"

ASSIGN_DECL: ":="

KW_CLASS: "class"
KW_CONST: "const"
KW_ELSE: "else"
KW_EXTERN: "extern"
KW_FALSE: "false"
KW_FN: "fn"
KW_FROM: "from"
KW_IF: "if"
KW_IMPORT: "import"
KW_NIL: "nil"
KW_PROT: "prot"
KW_PUB: "pub"
KW_SELF: "self"
KW_SWITCH: "switch"
KW_TRUE: "true"
KW_VAR: "var"
KW_WHILE: "while"

