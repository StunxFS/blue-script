// Copyright (C) 2024 Jose Mendoza. All rights reserved. Use of this 
// source code is governed by an MIT license that can be found in the 
// LICENSE file.

start: (decl | stmt)*

// Declarations

decl: accessibility? (mod_decl | fn_decl)
mod_decl: "mod" NAME "{" decl* "}"

global_var: "var" "mut"? NAME (":" type)? ":=" expr

class_decl: "class" NAME "{" (accessibility? class_field | decl)* "}"
class_field: "mut"? NAME ":" type (":=" expr)?

fn_decl: "fn" NAME fn_args ("!" | type)? "{" stmt* "}"
fn_args: "(" ( fn_self ("," fn_args_list)? | fn_args_list )? ")"
fn_args_list: fn_arg ("," fn_arg)*
fn_arg: "mut"? NAME ":" type (":=" expr)?
fn_self: "mut"? "self"

accessibility: "pub" | "prot"

type: "string" | "number" | NAME ("." NAME)* | "?" type

// Statements

stmt: expr
       | assignment
       | block
       | "while" "(" expr ")" stmt

block: "{" stmt* "}"
assignment: "mut"? NAME ("," "mut"? NAME)* op_assign expr
op_assign: "=" | ":=" | "+=" | "-=" | "/=" | "*=" | "%=" | "|=" | "^=" | "&="

// Expressions

expr: literal
       | expr "." NAME
       | expr "(" (expr ("," expr)*)? ")"
       | "if" "(" expr ")" stmt ("else" stmt)?
       | "switch" ("(" expr ")")? "{" switch_branches "}"

switch_branches: switch_branch ("," switch_branch)*
switch_branch: expr ("," expr)* "->" stmt
       | "else" "->" stmt

literal: STRING | number | "true" | "false" | "nil" | "undefined" | "self" | NAME | tuple_literal
tuple_literal: "(" expr ("," expr)* ")"
number: DEC_NUMBER | HEX_NUMBER | OCT_NUMBER | SIGNED_NUMBER

// Tokens

DEC_NUMBER: /[1-9]\d*l?/i
HEX_NUMBER: /0x[\da-f]*l?/i
OCT_NUMBER: /0o?[0-7]*l?/i
COMMENT: "//" /[^\n]*/ // single-line comments
       | "/*" /(.|\n|\r)+/ "*/" // multiline comments

%import common.FLOAT -> FLOAT
%import common.INT -> _INT
%import common.CNAME -> NAME
%import common.ESCAPED_STRING -> STRING
%import common.SIGNED_NUMBER
%import common.WS

%ignore COMMENT
%ignore WS