// Copyright (C) 2024 Jose Mendoza. All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the
// LICENSE file.

start: (decl | stmt)*

// Declarations

decl: access_modifier? (import_decl | global_var_decl | const_decl | class_decl | fn_decl)

import_decl: KW_IMPORT (custom_symbol_import KW_FROM)? STRING
custom_symbol_import: LBRACE NAME (COMMA NAME)* RBRACE
       | NAME
       | MUL

global_var_decl: KW_VAR NAME (COLON type)? ASSIGN_DECL expr
const_decl: KW_CONST NAME (COLON type)? ASSIGN_DECL expr

class_decl: KW_CLASS NAME LBRACE (class_field | decl)* RBRACE
class_field: access_modifier? NAME COLON type (ASSIGN_DECL expr)?

fn_decl: KW_FN NAME LPAREN fn_args? RPAREN (BANG | type)? LBRACE stmt* RBRACE
fn_args: (KW_SELF | fn_arg) (COMMA fn_arg)*
fn_arg: NAME COLON type (ASSIGN_DECL expr)?

access_modifier: KW_PUB | KW_PROT

type: "bool"
       | "number"
       | "string"
       | "thread"
       | "userdata"
       | NAME (DOT NAME)*
       | QUESTION type
       | LBRACKET expr? RBRACKET type
       | LBRACE type COLON type RBRACE
       | type PIPE type (PIPE type)*
       | LPAREN type COMMA type (COMMA type)* RPAREN

// Statements

stmt: (expr
       | assignment
       | block
       | KW_WHILE LPAREN expr RPAREN stmt)

block: LBRACE stmt* RBRACE
assignment: expr (COMMA expr)* op_assign expr
op_assign: "=" | ASSIGN_DECL | "+=" | "-=" | "/=" | "*=" | "%=" | "|=" | "^=" | "&="

// Expressions

expr: literal
       | LPAREN expr RPAREN
       | expr DOT NAME
       | LBRACKET (expr (COMMA expr)*)? RBRACKET BANG?
       | LBRACE expr COLON expr (COMMA expr COLON expr)* RBRACE
       | expr LPAREN (expr (COMMA expr)*)? RPAREN
       | AT NAME LPAREN (expr (COMMA expr)*)? RPAREN
       | KW_IF LPAREN expr RPAREN stmt (KW_ELSE stmt)?
       | KW_SWITCH (LPAREN expr RPAREN)? LBRACE switch_branches RBRACE

switch_branches: switch_branch (COMMA switch_branch)*
switch_branch: expr (COMMA expr)* ARROW stmt
       | KW_ELSE ARROW stmt

literal: STRING | number | KW_TRUE | KW_FALSE | KW_NIL | KW_UNDEFINED | KW_SELF | NAME | tuple_literal
tuple_literal: LPAREN expr (COMMA expr)* RPAREN
number: DEC_NUMBER | HEX_NUMBER | OCT_NUMBER | SIGNED_NUMBER

// Tokens

MUL: "*"
AT: "@"
SLASH: "/"
ARROW: "->"
COMMA: ","
DOT: "."
COLON: ":"
BANG: "!"
QUESTION: "?"
PIPE: "|"
LPAREN: "("
RPAREN: ")"
LBRACE: "{"
RBRACE: "}"
LBRACKET: "["
RBRACKET: "]"

ASSIGN_DECL: ":="

KW_FROM: "from"
KW_IMPORT: "import"
KW_TRUE: "true"
KW_FALSE: "false"
KW_NIL: "nil"
KW_UNDEFINED: "undefined"
KW_ELSE: "else"
KW_IF: "if"
KW_SWITCH: "switch"
KW_WHILE: "while"
KW_PROT: "prot"
KW_PUB: "pub"
KW_FN: "fn"
KW_CONST: "const"
KW_CLASS: "class"
KW_VAR: "var"
KW_SELF: "self"

DEC_NUMBER: /[1-9]\d*l?/i
HEX_NUMBER: /0x[\da-f]*l?/i
OCT_NUMBER: /0o?[0-7]*l?/i
COMMENT: "//" /[^\n]*/ // single-line comments
       | "/*" /(.|\n|\r)+/ "*/" // multiline comments

%import common.FLOAT -> FLOAT
%import common.INT -> _INT
%import common.CNAME -> NAME
%import common.ESCAPED_STRING -> STRING
%import common.SIGNED_NUMBER
%import common.WS

%ignore COMMENT
%ignore WS
